import numpy as np
import torch
from torch.utils.data import Dataset
import pickle
import os
from torch.utils.data.dataloader import default_collate

torch.set_default_tensor_type(torch.FloatTensor)

def read_text_file(file_path):
    try:
        with open(file_path, 'r',) as file:
            lines = file.readlines()
            split_lines = [line.strip().split(' ')[0] for line in lines]
        return split_lines
    except FileNotFoundError:
        print("Error: File not found.")
        return None
    except Exception as e:
        print(f"Error: {e}")
        return None



class ASVspoof2019(Dataset):
    def __init__(self, access_type, path_to_features, path_to_protocol, part='train', feature='LFCC',
                 genuine_only=False, feat_len=750, padding='repeat',include_gender = True):
        self.access_type = access_type
        # self.ptd = path_to_database
        self.path_to_features = path_to_features
        self.part = part
        self.ptf = os.path.join(path_to_features, self.part)
        # self.path_to_audio = os.path.join(self.ptd, access_type, 'ASVspoof2019_'+access_type+'_'+ self.part +'/flac/')
        self.genuine_only = genuine_only
        self.feat_len = feat_len
        self.feature = feature
        self.path_to_protocol = path_to_protocol
        self.padding = padding
        
        self.include_gender = include_gender
        
        self.check_male_train = ['LA_0082', 'LA_0083', 'LA_0089', 'LA_0092', 'LA_0093', 'LA_0094','LA_0095', 'LA_0096']
        
        self.check_female_train = ['LA_0079', 'LA_0080', 'LA_0081', 'LA_0084', 'LA_0085', 'LA_0086','LA_0087', 'LA_0088', 'LA_0090', 'LA_0091', 'LA_0097', 'LA_0098']
        
        self.check_male_dev = ['LA_0070', 'LA_0071', 'LA_0073', 'LA_0076', 'LA_0099', 'LA_0100','LA_0101', 'LA_0105']
        
        self.check_female_dev = ['LA_0069', 'LA_0072', 'LA_0074', 'LA_0075', 'LA_0077', 'LA_0078','LA_0102', 'LA_0103', 'LA_0104', 'LA_0106', 'LA_0107','LA_0108']

        self.check_female_eval =    ['LA_0004', 'LA_0006', 'LA_0008', 'LA_0009', 'LA_0010', 'LA_0012',
                                    'LA_0014', 'LA_0016', 'LA_0017', 'LA_0019', 'LA_0020', 'LA_0022',
                                    'LA_0024', 'LA_0026', 'LA_0027', 'LA_0029', 'LA_0031', 'LA_0033',
                                    'LA_0034', 'LA_0035', 'LA_0037', 'LA_0039', 'LA_0041', 'LA_0042',
                                    'LA_0043', 'LA_0045', 'LA_0047', 'LA_0050', 'LA_0051', 'LA_0053',
                                    'LA_0055', 'LA_0058', 'LA_0060', 'LA_0061', 'LA_0063', 'LA_0066',
                                    'LA_0067']
        
        self.check_male_eval =  ['LA_0001', 'LA_0002', 'LA_0003', 'LA_0005', 'LA_0007', 'LA_0011',
                                'LA_0013', 'LA_0015', 'LA_0018', 'LA_0021', 'LA_0023', 'LA_0025',
                                'LA_0028', 'LA_0030', 'LA_0032', 'LA_0036', 'LA_0038', 'LA_0040',
                                'LA_0044', 'LA_0046', 'LA_0048', 'LA_0049', 'LA_0052', 'LA_0054',
                                'LA_0056', 'LA_0057', 'LA_0059', 'LA_0064', 'LA_0065', 'LA_0068']
        
        if self.part == 'train':
            protocol = os.path.join(self.path_to_protocol, 'ASVspoof2019.'+access_type+'.cm.'+ self.part + '.trn.txt')
        else:
            protocol = os.path.join(self.path_to_protocol, 'ASVspoof2019.'+access_type+'.cm.'+ self.part + '.trl.txt')
        if self.access_type == 'LA':
            self.tag = {"-": 0, "A01": 1, "A02": 2, "A03": 3, "A04": 4, "A05": 5, "A06": 6, "A07": 7, "A08": 8, "A09": 9,
                      "A10": 10, "A11": 11, "A12": 12, "A13": 13, "A14": 14, "A15": 15, "A16": 16, "A17": 17, "A18": 18,
                      "A19": 19}
        else:
            self.tag = {"-": 0, "AA": 1, "AB": 2, "AC": 3, "BA": 4, "BB": 5, "BC": 6, "CA": 7, "CB": 8, "CC": 9}
        
        self.label = {"spoof": 0, "bonafide": 1}

        with open(protocol, 'r') as f:
            audio_info = [info.strip().split() for info in f.readlines()]
            if genuine_only:
                assert self.part in ["train", "dev", "eval"]
                if self.access_type == "LA":
                    #num_bonafide = {"train": 2580, "dev": 2548}
                    self.all_info =  [entry for entry in audio_info if entry[4] != 'spoof']
            else:
                self.all_info = audio_info

    def __len__(self):
        return len(self.all_info)

    def __getitem__(self, idx):
        #speaker, filename, _, tag, label = self.all_info[idx]
        speaker, filename, _, tag, label,_ = self.all_info[idx]
        try:
            with open(self.ptf + '/'+ filename + self.feature + '.pkl', 'rb') as feature_handle:
                feat_mat = pickle.load(feature_handle)
        except:
            # add this exception statement since we may change the data split
            def the_other(train_or_dev):
                assert train_or_dev in ["train", "dev"]
                res = "dev" if train_or_dev == "train" else "train"
                return res
            with open(os.path.join(self.path_to_features, the_other(self.part)) + '/'+ filename + self.feature + '.pkl', 'rb') as feature_handle:
                feat_mat = pickle.load(feature_handle)

        feat_mat = torch.from_numpy(feat_mat)
        this_feat_len = feat_mat.shape[1]
        if this_feat_len > self.feat_len:
            startp = np.random.randint(this_feat_len-self.feat_len)
            feat_mat = feat_mat[:, startp:startp+self.feat_len]
        if this_feat_len < self.feat_len:
            if self.padding == 'zero':
                feat_mat = padding(feat_mat, self.feat_len)
            elif self.padding == 'repeat':
                feat_mat = repeat_padding(feat_mat, self.feat_len)
            else:
                raise ValueError('Padding should be zero or repeat!')
            
          
        if self.include_gender == True:
            if speaker in self.check_female_dev or speaker in self.check_female_eval or speaker in self.check_female_train:
                gender = "female"
            elif speaker in self.check_male_dev or speaker in self.check_male_eval or speaker in self.check_male_train:
                gender = "male"
            else:
                raise ValueError("Problem to find gender")
            
        if self.genuine_only == True:
            if label != 'bonafide':
                raise ValueError("bonafide label should only be included")
            
            return feat_mat, filename, self.tag[tag], self.label[label], gender , speaker

        return feat_mat, filename, self.tag[tag], self.label[label] , _ , speaker

    def collate_fn(self, samples):
        return default_collate(samples)

def padding(spec, ref_len):
    width, cur_len = spec.shape
    assert ref_len > cur_len
    padd_len = ref_len - cur_len
    return torch.cat((spec, torch.zeros(width, padd_len, dtype=spec.dtype)), 1)

def repeat_padding(spec, ref_len):
    mul = int(np.ceil(ref_len / spec.shape[1]))
    spec = spec.repeat(1, mul)[:, :ref_len]
    return spec





class ASVspoof5(Dataset):
    def __init__(self, access_type, path_to_features, path_to_protocol, part='train', feature='LFCC',
                 genuine_only=False, feat_len=750, padding='repeat',include_gender = True):
        self.access_type = access_type
        # self.ptd = path_to_database
        self.path_to_features = path_to_features
        self.part = part
        self.ptf = os.path.join(path_to_features, self.part)
        # self.path_to_audio = os.path.join(self.ptd, access_type, 'ASVspoof2019_'+access_type+'_'+ self.part +'/flac/')
        self.genuine_only = genuine_only
        self.feat_len = feat_len
        self.feature = feature
        self.path_to_protocol = path_to_protocol
        self.padding = padding
        
        self.include_gender = include_gender
        
        self.check_male_train = ['T_0858', 'T_4075', 'T_0938', 'T_0610', 'T_2865', 'T_5232', 'T_0673', 'T_1600',
                                'T_2386', 'T_3280', 'T_2498', 'T_1711', 'T_4362', 'T_0975', 'T_5246', 'T_2955',
                                'T_4447', 'T_5093', 'T_2098', 'T_5361', 'T_3491', 'T_3828', 'T_3201', 'T_3288',
                                'T_4463', 'T_2449', 'T_0332', 'T_4053', 'T_5257', 'T_0636', 'T_4700', 'T_5224',
                                'T_5164', 'T_4781', 'T_5023', 'T_3128', 'T_4769', 'T_2351', 'T_2368', 'T_4598',
                                'T_2429', 'T_2782', 'T_0676', 'T_4859', 'T_0571', 'T_0517', 'T_1408', 'T_1304',
                                'T_1492', 'T_5053', 'T_4264', 'T_0993', 'T_2468', 'T_0925', 'T_3269', 'T_2070',
                                'T_0818', 'T_1441', 'T_1147', 'T_1077', 'T_4913', 'T_5207', 'T_4830', 'T_3526',
                                'T_5099', 'T_5231', 'T_3156', 'T_5033', 'T_1183', 'T_0959', 'T_5251', 'T_0012',
                                'T_2150', 'T_0712', 'T_0267', 'T_4175', 'T_1905', 'T_4279', 'T_1433', 'T_0313',
                                'T_1925', 'T_4305', 'T_5438', 'T_1122', 'T_4102', 'T_5104', 'T_4306', 'T_0634',
                                'T_1753', 'T_1864', 'T_0764', 'T_0497', 'T_1674', 'T_4519', 'T_2195', 'T_0770',
                                'T_1938', 'T_2314', 'T_3603', 'T_5439', 'T_5455', 'T_4766', 'T_4030', 'T_4243',
                                'T_3758', 'T_4011', 'T_3236', 'T_3702', 'T_0524', 'T_3988', 'T_0609', 'T_5051',
                                'T_2527', 'T_3839', 'T_4059', 'T_2077', 'T_0842', 'T_1867', 'T_1872', 'T_1613',
                                'T_1971', 'T_5003', 'T_0650', 'T_1128', 'T_0554', 'T_0331', 'T_5192', 'T_4959',
                                'T_4738', 'T_1936', 'T_3883', 'T_0326', 'T_2087', 'T_0519', 'T_0881', 'T_2801',
                                'T_1307', 'T_1265', 'T_1904', 'T_2507', 'T_2182', 'T_2278', 'T_2051', 'T_1659',
                                'T_0217', 'T_0020', 'T_5184', 'T_0291', 'T_2990', 'T_4104', 'T_0866', 'T_3543',
                                'T_1915', 'T_4474', 'T_1117', 'T_2348', 'T_3819', 'T_3624', 'T_5119', 'T_1939',
                                'T_1723', 'T_0287', 'T_3002', 'T_5124', 'T_1345', 'T_1570', 'T_1902', 'T_3342',
                                'T_2540', 'T_0664', 'T_3091', 'T_4489', 'T_4049', 'T_0316', 'T_4311', 'T_2365',
                                'T_3688', 'T_1717', 'T_5195', 'T_2169', 'T_0380', 'T_1421', 'T_5029', 'T_4211',
                                'T_2149', 'T_3910', 'T_2406', 'T_4166', 'T_1529', 'T_3771', 'T_3850', 'T_3857',
                                'T_3157', 'T_1660', 'T_0730', 'T_3229', 'T_5017', 'T_3458', 'T_1799', 'T_0934',
                                'T_0329', 'T_4684', 'T_4537', 'T_3191']
        
        self.check_female_train = ['T_4850', 'T_2896', 'T_1779', 'T_4459', 'T_4999', 'T_3734', 'T_1869', 'T_2260',
                                'T_1593', 'T_5389', 'T_1032', 'T_2326', 'T_2588', 'T_2845', 'T_3903', 'T_0039',
                                'T_2176', 'T_4996', 'T_3405', 'T_3801', 'T_1919', 'T_4797', 'T_3567', 'T_2626',
                                'T_1737', 'T_0213', 'T_1783', 'T_3455', 'T_5451', 'T_3996', 'T_3307', 'T_0101',
                                'T_1766', 'T_1812', 'T_1255', 'T_4787', 'T_3683', 'T_0440', 'T_4300', 'T_4022',
                                'T_1564', 'T_0282', 'T_2455', 'T_0499', 'T_3189', 'T_3196', 'T_4121', 'T_0621',
                                'T_0218', 'T_1731', 'T_3373', 'T_1726', 'T_0052', 'T_4090', 'T_2263', 'T_4277',
                                'T_1759', 'T_2284', 'T_1561', 'T_4493', 'T_4346', 'T_4731', 'T_1365', 'T_3816',
                                'T_1202', 'T_2201', 'T_1488', 'T_1616', 'T_3583', 'T_4486', 'T_5352', 'T_3181',
                                'T_3217', 'T_3198', 'T_3912', 'T_1961', 'T_2397', 'T_1976', 'T_5437', 'T_2780',
                                'T_2710', 'T_1308', 'T_0529', 'T_0796', 'T_0498', 'T_4125', 'T_4816', 'T_2563',
                                'T_1007', 'T_4618', 'T_4074', 'T_3587', 'T_2640', 'T_1145', 'T_2864', 'T_3863',
                                'T_4231', 'T_1592', 'T_4587', 'T_2131', 'T_3725', 'T_2630', 'T_1916', 'T_0027',
                                'T_0023', 'T_3753', 'T_2211', 'T_0696', 'T_0897', 'T_2742', 'T_1428', 'T_2324',
                                'T_0668', 'T_0396', 'T_2216', 'T_3703', 'T_3027', 'T_4286', 'T_2537', 'T_1606',
                                'T_1541', 'T_0046', 'T_3853', 'T_3454', 'T_2320', 'T_1645', 'T_1590', 'T_3298',
                                'T_4467', 'T_4410', 'T_2413', 'T_5453', 'T_4701', 'T_2984', 'T_1539', 'T_4126',
                                'T_2890', 'T_2472', 'T_2879', 'T_2905', 'T_0141', 'T_3093', 'T_0346', 'T_1100',
                                'T_1860', 'T_1771', 'T_2791', 'T_0349', 'T_4434', 'T_1500', 'T_0877', 'T_4203',
                                'T_1567', 'T_1159', 'T_0393', 'T_3392', 'T_0411', 'T_5331', 'T_1462', 'T_4256',
                                'T_1074', 'T_4184', 'T_3714', 'T_4018', 'T_1947', 'T_4399', 'T_3106', 'T_2101',
                                'T_3936', 'T_1724', 'T_1356', 'T_1752', 'T_2578', 'T_5401', 'T_0589', 'T_1800',
                                'T_0635', 'T_0622', 'T_1598', 'T_0298', 'T_4639', 'T_3650', 'T_4192', 'T_1644',
                                'T_3782', 'T_2416', 'T_4100', 'T_5432', 'T_0091', 'T_0854', 'T_2840', 'T_5284',
                                'T_2827', 'T_2193', 'T_0170', 'T_1401']
        
        self.check_male_dev = ['D_0106' ,   'D_5368' ,   'D_3166' ,   'D_4932' ,   'D_2968' ,   'D_3074' ,   'D_0461' ,   'D_4579' ,   'D_2203' ,   'D_3132' ,   'D_3497' ,   'D_3697' ,   
                                'D_1068' ,   'D_2092' ,   'D_2621' ,   'D_4825' ,   'D_4675' ,   'D_0177' ,   'D_3501' ,   'D_4821' ,   'D_2592' ,   'D_1957' ,   'D_0427' ,   'D_2929' ,   
                                'D_2654' ,   'D_0883' ,   'D_0865' ,   'D_2266' ,   'D_4951' ,   'D_3015' ,   'D_0513' ,   'D_0004' ,   'D_0562' ,   'D_0400' ,   'D_2793' ,   'D_3518' ,   
                                'D_0013' ,   'D_1739' ,   'D_0301' ,   'D_0537' ,   'D_0976' ,   'D_5066' ,   'D_0956' ,   'D_3679' ,   'D_2364' ,   'D_0962' ,   'D_2330' ,   'D_0354' ,   
                                'D_0906' ,   'D_2740' ,   'D_5329' ,   'D_0795' ,   'D_4814' ,   'D_3205' ,   'D_2629' ,   'D_0375' ,   'D_3098' ,   'D_4719' ,   'D_3361' ,   'D_5064' ,   
                                'D_0322' ,   'D_0805' ,   'D_5274' ,   'D_3668' ,   'D_4320' ,   'D_3845' ,   'D_5057' ,   'D_0546' ,   'D_2648' ,   'D_1921' ,   'D_1741' ,   'D_1331' ,   
                                'D_4006' ,   'D_3953' ,   'D_1474' ,   'D_0900' ,   'D_2338' ,   'D_3162' ,   'D_1215' ,   'D_0425' ,   'D_4607' ,   'D_1651' ,   'D_4200' ,   'D_1327' ,   
                                'D_1445' ,   'D_4619' ,   'D_2050' ,   'D_5080' ,   'D_3622' ,   'D_1486' ,   'D_3425' ,   'D_4838' ,   'D_5076' ,   'D_1398' ,   'D_0383' ,   'D_3332' ,   
                                'D_1261' ,   'D_5292' ,   'D_1319' ,   'D_3545' ,   'D_0605' ,   'D_3457' ,   'D_0123' ,   'D_0430' ,   'D_3014' ,   'D_2059' ,   'D_1444' ,   'D_4485' ,   
                                'D_0903' ,   'D_1756' ,   'D_0489' ,   'D_2788' ,   'D_3798' ,   'D_3911' ,   'D_1729' ,   'D_0722' ,   'D_2345' ,   'D_2953' ,   'D_5035' ,   'D_0582' ,   
                                'D_2300' ,   'D_2544' ,   'D_3407' ,   'D_4957' ,   'D_4882' ,   'D_3781' ,   'D_4470' ,   'D_3037' ,   'D_3063' ,   'D_4974' ,   'D_3337' ,   'D_5214' ,   
                                'D_5462' ,   'D_4737' ,   'D_4735' ,   'D_3885' ,   'D_2913' ,   'D_3590' ,   'D_2624' ,   'D_0819' ,   'D_2919' ,   'D_4865' ,   'D_3163' ,   'D_1888' ,   
                                'D_4674' ,   'D_1873' ,   'D_1278' ,   'D_2684' ,   'D_2876' ,   'D_3504' ,   'D_4057' ,   'D_0407' ,   'D_3689' ,   'D_5355' ,   'D_5052' ,   'D_0936' ,   
                                'D_1323' ,   'D_3192' ,   'D_4111' ,   'D_3561' ,   'D_3986' ,   'D_0921' ,   'D_4870' ,   'D_5160' ,   'D_2089' ,   'D_2292' ,   'D_1837' ,   'D_3206' ,   
                                'D_4448' ,   'D_0293' ,   'D_1719' ,   'D_4721' ,   'D_3273' ,   'D_1432' ,   'D_3171' ,   'D_1461' ,   'D_1610' ,   'D_3983' ,   'D_0467' ,   'D_4173' ,   
                                'D_2016' ,   'D_5360' ,   'D_5436' ,   'D_4224' ,   'D_0421' ,   'D_1725' ,   'D_3533' ,   'D_3237' ,   'D_2731' ,   'D_1287' ,   'D_5236' ,   'D_2396' ,   
                                'D_5153' ,   'D_4861' ,   'D_4160' ,   'D_2809' ,   'D_1821' ,   'D_1165' ,   'D_5474' ,   'D_4964' ,   'D_1055' ,   'D_3948' ,   'D_4228' ,   'D_5248' ,   
                                'D_5204' ,   'D_0296' ,   'D_5025' ,   'D_4888' ,   'D_1306' ,   'D_0715' ,   'D_2753' ,   'D_2627' ,   'D_4010' ,   'D_3632' ,   'D_5245' ,   'D_2442' ,   
                                'D_5447' ,   'D_1333' ,   'D_1250' ,   'D_4258' ,   'D_3061' ,   'D_0309' ,   'D_2168' ,   'D_2464' ,   'D_1896' ,   'D_1424' ,   'D_3270' ,   'D_4048' ,   
                                'D_2476' ,   'D_2541' ,   'D_5049' ,   'D_5222' ,   'D_3547' ,   'D_4444' ,   'D_0260' ,   'D_2049' ,   'D_0523' ,   'D_4377' ,   'D_2245' ,   'D_4321' ,   
                                'D_4294' ,   'D_4363' ,   'D_4740' ,   'D_3414' ,   'D_2931' ,   'D_1303' ,   'D_4225' ,   'D_4593' ,   'D_0725' ,   'D_4143' ,   'D_2255' ,   'D_0132' ,   
                                'D_0358' ,   'D_2172' ,   'D_0447' ,   'D_1234' ,   'D_5050' ,   'D_3372' ,   'D_3393' ,   'D_3527' ,   'D_1268' ,   'D_2019' ,   'D_4253' ,   'D_4025' ,   
                                'D_2142' ,   'D_4602' ,   'D_2656' ,   'D_2730' ,   'D_0146' ,   'D_3745' ,   'D_4488' ,   'D_5018' ,   'D_0065' ,   'D_1789' ,   'D_1847' ,   'D_2361' ,   
                                'D_0239' ,   'D_2179' ,   'D_0454' ,   'D_4265' ,   'D_1466' ,   'D_1951' ,   'D_3942' ,   'D_3649' ,   'D_5121' ,   'D_0181' ,   'D_0839' ,   'D_0768' ,   
                                'D_0107' ,   'D_3733' ,   'D_4260' ,   'D_1252' ,   'D_5309' ,   'D_0702' ,   'D_2294' ,   'D_0526' ,   'D_0028' ,   'D_4994' ,   'D_3895' ,   'D_1262' ,   
                                'D_2341' ,   'D_3020' ,   'D_3628' ,   'D_3228' ,   'D_3787' ,   'D_1054' ,   'D_2617' ,   'D_3358' ,   'D_0679' ,   'D_2055' ,   'D_1130' ,   'D_3452' ,   
                                'D_2872' ,   'D_5308' ,   'D_2134' ,   'D_4103' ,   'D_1006' ,   'D_3418' ,   'D_2770' ,   'D_4794' ,   'D_3420' ,   'D_0521' ,   'D_4140' ,   'D_5343' ,   
                                'D_2786' ,   'D_0632' ,   'D_0624' ,   'D_3357' ,   'D_1704' ,   'D_2312' ,   'D_0737' ,   'D_2213' ,   'D_4248' ,   'D_1946' ,   'D_2821' ,   'D_4379' ,   
                                'D_2752' ,   'D_2167' ,   'D_3001' ,   'D_4591' ,   'D_2532' ,   'D_0974' ,   'D_5256' ,   'D_0573' ,   'D_2424' ,   'D_2962' ,   'D_4531' ,   'D_3866' ,   
                                'D_2569' ,   'D_3134' ,   'D_3141' ,   'D_3861' ,   'D_4086' ,   'D_4105' ,   'D_4455' ,   'D_1692' ,   'D_4786' ,   'D_2362' ,   'D_0318' ,   'D_3898' ,   
                                'D_4530' ,   'D_4382' ,   'D_1447' ,   'D_0439' ,   'D_1377' ,   'D_1516' ,   'D_3961' ,   'D_1430' ,   'D_2601' ,   'D_3039' ,   'D_2739' ,   'D_3107' ,   
                                'D_0767' ,   'D_3594' ,   'D_1862' ,   'D_1301' ,   'D_3795' ,   'D_2635' ,   'D_1351' ,   'D_1292' ,   'D_1369' ,   'D_0654' ,   'D_1697' ,   'D_1754' ,   
                                'D_5254' ,   'D_3574' ,   'D_2171' ,   'D_1689' ,   'D_0687' ,   'D_0603' ,   'D_1747' ,   'D_1908' ,   'D_2282' ]
        
        self.check_female_dev = ['D_0062' ,   'D_0755' ,   'D_4461' ,   'D_1045' ,   'D_1911' ,   'D_0802' ,   'D_0913' ,   'D_2141' ,   'D_5283' ,   'D_5316' ,   'D_2288' ,   'D_1708' ,   
                                'D_3772' ,   'D_3593' ,   'D_5143' ,   'D_4322' ,   'D_3124' ,   'D_5113' ,   'D_0059' ,   'D_1418' ,   'D_5157' ,   'D_1667' ,   'D_5433' ,   'D_5290' ,   
                                'D_3219' ,   'D_0985' ,   'D_5102' ,   'D_1637' ,   'D_2422' ,   'D_1002' ,   'D_1217' ,   'D_1039' ,   'D_1681' ,   'D_4844' ,   'D_0003' ,   'D_5397' ,   
                                'D_5347' ,   'D_4356' ,   'D_3293' ,   'D_0323' ,   'D_1948' ,   'D_1458' ,   'D_0368' ,   'D_3737' ,   'D_0835' ,   'D_2619' ,   'D_1026' ,   'D_0756' ,   
                                'D_4071' ,   'D_2371' ,   'D_3740' ,   'D_5008' ,   'D_0314' ,   'D_2721' ,   'D_1566' ,   'D_3990' ,   'D_5163' ,   'D_2357' ,   'D_1112' ,   'D_4054' ,   
                                'D_2095' ,   'D_3437' ,   'D_0614' ,   'D_4029' ,   'D_0604' ,   'D_0496' ,   'D_2218' ,   'D_4081' ,   'D_3378' ,   'D_0729' ,   'D_2415' ,   'D_0283' ,   
                                'D_0486' ,   'D_0669' ,   'D_4599' ,   'D_3856' ,   'D_1612' ,   'D_2209' ,   'D_0244' ,   'D_3473' ,   'D_1972' ,   'D_2206' ,   'D_3233' ,   'D_4856' ,   
                                'D_4831' ,   'D_2236' ,   'D_3732' ,   'D_5165' ,   'D_2163' ,   'D_0324' ,   'D_3183' ,   'D_4269' ,   'D_2000' ,   'D_5174' ,   'D_1153' ,   'D_4653' ,   
                                'D_3933' ,   'D_5388' ,   'D_0154' ,   'D_0870' ,   'D_3003' ,   'D_0321' ,   'D_2751' ,   'D_5314' ,   'D_5112' ,   'D_4297' ,   'D_3075' ,   'D_3175' ,   
                                'D_0568' ,   'D_0488' ,   'D_2096' ,   'D_3406' ,   'D_1228' ,   'D_4069' ,   'D_2900' ,   'D_0750' ,   'D_3402' ,   'D_2529' ,   'D_2825' ,   'D_0590' ,   
                                'D_0352' ,   'D_4116' ,   'D_2460' ,   'D_4527' ,   'D_2327' ,   'D_1807' ,   'D_1341' ,   'D_5480' ,   'D_3927' ,   'D_2073' ,   'D_4508' ,   'D_4789' ,   
                                'D_5011' ,   'D_2703' ,   'D_0151' ,   'D_5273' ,   'D_2111' ,   'D_3511' ,   'D_3600' ,   'D_1483' ,   'D_3931' ,   'D_2489' ,   'D_3602' ,   'D_4023' ,   
                                'D_5457' ,   'D_2991' ,   'D_0399' ,   'D_4423' ,   'D_3964' ,   'D_2937' ,   'D_4137' ,   'D_0090' ,   'D_1468' ,   'D_4767' ,   'D_2506' ,   'D_4205' ,   
                                'D_1589' ,   'D_4724' ,   'D_4660' ,   'D_2419' ,   'D_5006' ,   'D_2561' ,   'D_3606' ,   'D_0182' ,   'D_5148' ,   'D_1382' ,   'D_4712' ,   'D_4627' ,   
                                'D_1956' ,   'D_4458' ,   'D_1343' ,   'D_4236' ,   'D_2519' ,   'D_0637' ,   'D_2835' ,   'D_3916' ,   'D_2452' ,   'D_2657' ,   'D_5169' ,   'D_2947' ,   
                                'D_4558' ,   'D_2159' ,   'D_2670' ,   'D_1102' ,   'D_3343' ,   'D_2549' ,   'D_0236' ,   'D_3773' ,   'D_1495' ,   'D_1631' ,   'D_1062' ,   'D_3887' ,   
                                'D_2366' ,   'D_4874' ,   'D_2275' ,   'D_4511' ,   'D_2608' ,   'D_1989' ,   'D_5213' ,   'D_4384' ,   'D_3276' ,   'D_0164' ,   'D_2494' ,   'D_2975' ,   
                                'D_4685' ,   'D_0572' ,   'D_4237' ,   'D_5424' ,   'D_0538' ,   'D_0087' ,   'D_2884' ,   'D_3778' ,   'D_2736' ,   'D_0487' ,   'D_3429' ,   'D_4366' ,   
                                'D_4108' ,   'D_4676' ,   'D_0978' ,   'D_4945' ,   'D_4052' ,   'D_3975' ,   'D_3644' ,   'D_1125' ,   'D_3891' ,   'D_3576' ,   'D_4365' ,   'D_0385' ,   
                                'D_5037' ,   'D_3609' ,   'D_5367' ,   'D_3383' ,   'D_3211' ,   'D_5377' ,   'D_4276' ,   'D_1325' ,   'D_3674' ,   'D_2298' ,   'D_4110' ,   'D_3309' ,   
                                'D_5419' ,   'D_0620' ,   'D_0233' ,   'D_1138' ,   'D_0902' ,   'D_4811' ,   'D_2126' ,   'D_3278' ,   'D_2914' ,   'D_0152' ,   'D_1079' ,   'D_4574' ,   
                                'D_4839' ,   'D_3978' ,   'D_0444' ,   'D_0569' ,   'D_5261' ,   'D_5478' ,   'D_0752' ,   'D_0868' ,   'D_0254' ,   'D_3890' ,   'D_2609' ,   'D_2253' ,   
                                'D_1205' ,   'D_2375' ,   'D_0458' ,   'D_2935' ,   'D_4063' ,   'D_4847' ,   'D_0867' ,   'D_0685' ,   'D_3145' ,   'D_4596' ,   'D_5384' ,   'D_5183' ,   
                                'D_4924' ,   'D_0395' ,   'D_1909' ,   'D_4817' ,   'D_0050' ,   'D_0980' ,   'D_5345' ,   'D_3670' ,   'D_3922' ,   'D_3153' ,   'D_3905' ,   'D_5167' ,   
                                'D_4955' ,   'D_3505' ,   'D_1161' ,   'D_1597' ,   'D_0942' ,   'D_0006' ,   'D_2359' ,   'D_3521' ,   'D_1182' ,   'D_3657' ,   'D_3136' ,   'D_1982' ,   
                                'D_5059' ,   'D_1569' ,   'D_3984' ,   'D_0462' ,   'D_3537' ,   'D_1035' ,   'D_1767' ,   'D_2279' ,   'D_4441' ,   'D_1064' ,   'D_2777' ,   'D_1448' ,   
                                'D_3013' ,   'D_4026' ,   'D_0950' ,   'D_3353' ,   'D_5021' ,   'D_5400' ,   'D_4355' ,   'D_2668' ,   'D_0234' ,   'D_0482' ,   'D_3641' ,   'D_2091' ,   
                                'D_4334' ,   'D_2170' ,   'D_0949' ,   'D_5410' ,   'D_3997' ,   'D_5111' ,   'D_4487' ,   'D_5180' ,   'D_0874' ,   'D_1208' ,   'D_3401' ,   'D_1475' ,   
                                'D_2607' ,   'D_1526' ,   'D_0777' ,   'D_3616' ,   'D_0907' ,   'D_3724' ,   'D_4472' ,   'D_2870' ,   'D_1736' ,   'D_4033' ,   'D_4008' ,   'D_4021' ,   
                                'D_2869' ,   'D_0735' ,   'D_3519' ,   'D_3369' ,   'D_4968' ,   'D_2013' ,   'D_0306' ,   'D_3460' ,   'D_5092' ,   'D_4586' ,   'D_1417' ,   'D_4370' ,   
                                'D_2916' ,   'D_5448' ,   'D_1272' ,   'D_4262' ,   'D_0207' ,   'D_1221' ,   'D_0335' ,   'D_1768' ,   'D_1459' ,   'D_3720' ,   'D_0660' ,   'D_4966' ,   
                                'D_0330' ,   'D_3529' ,   'D_3636' ,   'D_0277' ,   'D_1853' ,   'D_5247' ,   'D_3274' ,   'D_0592' ,   'D_5199' ,   'D_2841' ,   'D_4124' ,   'D_1830' ,   
                                'D_3815' ,   'D_3554' ,   'D_2661' ,   'D_3170' ,   'D_4497' ,   'D_3212' ,   'D_4218' ,   'D_4307' ]

        self.check_female_eval =    ['E_3614' ,   'E_2192' ,   'E_0884' ,   'E_2426' ,   'E_0025' ,   'E_0799' ,   'E_1563' ,   'E_3645' ,   'E_2296' ,   'E_3439' ,   'E_0532' ,   'E_3860' ,   
                                    'E_2165' ,   'E_5305' ,   'E_5118' ,   'E_1464' ,   'E_2682' ,   'E_3806' ,   'E_2882' ,   'E_4433' ,   'E_1383' ,   'E_3601' ,   'E_2886' ,   'E_5395' ,   
                                    'E_4903' ,   'E_2718' ,   'E_3176' ,   'E_2471' ,   'E_2207' ,   'E_4554' ,   'E_3130' ,   'E_1746' ,   'E_4922' ,   'E_1271' ,   'E_1269' ,   'E_1170' ,   
                                    'E_3874' ,   'E_0583' ,   'E_3575' ,   'E_5042' ,   'E_0286' ,   'E_3374' ,   'E_1991' ,   'E_4414' ,   'E_5298' ,   'E_2602' ,   'E_3262' ,   'E_1734' ,   
                                    'E_4672' ,   'E_3669' ,   'E_4572' ,   'E_2244' ,   'E_0823' ,   'E_1473' ,   'E_3756' ,   'E_2824' ,   'E_4793' ,   'E_0626' ,   'E_4118' ,   'E_0820' ,   
                                    'E_3330' ,   'E_0671' ,   'E_1791' ,   'E_2881' ,   'E_3760' ,   'E_0285' ,   'E_0344' ,   'E_5149' ,   'E_5041' ,   'E_4326' ,   'E_0167' ,   'E_4765' ,   
                                    'E_1387' ,   'E_0148' ,   'E_4671' ,   'E_0178' ,   'E_1684' ,   'E_3208' ,   'E_5097' ,   'E_0246' ,   'E_5293' ,   'E_4690' ,   'E_0008' ,   'E_0472' ,   
                                    'E_2803' ,   'E_0048' ,   'E_0765' ,   'E_0033' ,   'E_0378' ,   'E_0261' ,   'E_2477' ,   'E_0413' ,   'E_2807' ,   'E_4168' ,   'E_3370' ,   'E_0738' ,   
                                    'E_0159' ,   'E_3822' ,   'E_2986' ,   'E_4961' ,   'E_4938' ,   'E_4328' ,   'E_4774' ,   'E_4451' ,   'E_1154' ,   'E_0954' ,   'E_4561' ,   'E_3297' ,   
                                    'E_0698' ,   'E_4808' ,   'E_4064' ,   'E_4570' ,   'E_3234' ,   'E_3285' ,   'E_0150' ,   'E_2174' ,   'E_2427' ,   'E_2633' ,   'E_2354' ,   'E_5427' ,   
                                    'E_3331' ,   'E_2847' ,   'E_4881' ,   'E_4238' ,   'E_0408' ,   'E_0114' ,   'E_1028' ,   'E_0392' ,   'E_3463' ,   'E_5408' ,   'E_3117' ,   'E_2018' ,   
                                    'E_2409' ,   'E_2757' ,   'E_1721' ,   'E_3441' ,   'E_1975' ,   'E_4510' ,   'E_1081' ,   'E_0784' ,   'E_2893' ,   'E_2068' ,   'E_1075' ,   'E_4525' ,   
                                    'E_5306' ,   'E_4094' ,   'E_3560' ,   'E_4512' ,   'E_4610' ,   'E_1665' ,   'E_4041' ,   'E_2404' ,   'E_5383' ,   'E_4428' ,   'E_2066' ,   'E_1963' ,   
                                    'E_5302' ,   'E_1477' ,   'E_4283' ,   'E_3304' ,   'E_0801' ,   'E_0317' ,   'E_0852' ,   'E_2458' ,   'E_2838' ,   'E_0011' ,   'E_3843' ,   'E_1877' ,   
                                    'E_4249' ,   'E_4062' ,   'E_5077' ,   'E_3190' ,   'E_5344' ,   'E_3154' ,   'E_3151' ,   'E_5185' ,   'E_5271' ,   'E_2799' ,   'E_3995' ,   'E_0579' ,   
                                    'E_1162' ,   'E_3711' ,   'E_2550' ,   'E_4478' ,   'E_4976' ,   'E_0648' ,   'E_3615' ,   'E_0377' ,   'E_3152' ,   'E_4083' ,   'E_4520' ,   'E_4471' ,   
                                    'E_3687' ,   'E_4400' ,   'E_5108' ,   'E_0153' ,   'E_1553' ,   'E_3642' ,   'E_0357' ,   'E_4397' ,   'E_1370' ,   'E_2281' ,   'E_3858' ,   'E_0540' ,   
                                    'E_3310' ,   'E_1525' ,   'E_2457' ,   'E_2346' ,   'E_0067' ,   'E_3325' ,   'E_3296' ,   'E_1010' ,   'E_4556' ,   'E_2926' ,   'E_4954' ,   'E_1241' ,   
                                    'E_0876' ,   'E_0371' ,   'E_5312' ,   'E_2479' ,   'E_5046' ,   'E_4907' ,   'E_1758' ,   'E_3025' ,   'E_0418' ,   'E_4298' ,   'E_1568' ,   'E_1762' ,   
                                    'E_3750' ,   'E_1172' ,   'E_5098' ,   'E_3909' ,   'E_0984' ,   'E_0893' ,   'E_3982' ,   'E_2071' ,   'E_4445' ,   'E_2405' ,   'E_4413' ,   'E_2030' ,   
                                    'E_3094' ,   'E_0284' ,   'E_0124' ,   'E_0879' ,   'E_2873' ,   'E_1934' ,   'E_0753' ,   'E_1078' ,   'E_0203' ,   'E_3244' ,   'E_4644' ,   'E_0016' ,   
                                    'E_2447' ,   'E_3267' ,   'E_5337' ,   'E_1029' ,   'E_3878' ,   'E_5067' ,   'E_1832' ,   'E_0615' ,   'E_1293' ,   'E_1549' ,   'E_3184' ,   'E_0394' ,   
                                    'E_4638' ,   'E_0465' ,   'E_3678' ,   'E_1350' ,   'E_4032' ,   'E_4792' ,   'E_2579' ,   'E_0463' ,   'E_2086' ,   'E_3981' ,   'E_3377' ,   'E_2769' ,   
                                    'E_1452' ,   'E_4117' ,   'E_1575' ,   'E_3973' ,   'E_3077' ,   'E_3360' ,   'E_1256' ,   'E_2958' ,   'E_0369' ,   'E_5117' ,   'E_2768' ,   'E_3448' ,   
                                    'E_5044' ,   'E_0355' ,   'E_0857' ,   'E_3131' ,   'E_2265' ,   'E_3708' ,   'E_4240' ,   'E_3553' ,   'E_2398' ,   'E_1247' ,   'E_2618' ,   'E_5425' ,   
                                    'E_3476' ,   'E_5356' ,   'E_4526' ,   'E_5090' ,   'E_1429' ,   'E_3676' ,   'E_2705' ,   'E_2521' ,   'E_4342' ,   'E_3640' ,   'E_2450' ,   'E_3736' ,   
                                    'E_2810' ,   'E_3780' ,   'E_5190' ,   'E_0201' ,   'E_2443' ,   'E_0895' ,   'E_4460' ,   'E_3203' ,   'E_5382' ,   'E_4446' ,   'E_1926' ,   'E_5390' ,   
                                    'E_1238' ,   'E_4337' ,   'E_5330' ,   'E_3566' ,   'E_2928' ,   'E_1820' ,   'E_2431' ,   'E_4437' ,   'E_1355' ,   'E_3079' ,   'E_3069' ,   'E_0901' ,   
                                    'E_3226' ,   'E_0379' ,   'E_2539' ,   'E_3739' ,   'E_0374' ,   'E_2221' ,   'E_4790' ,   'E_2329' ,   'E_2775' ,   'E_1224' ,   'E_3659' ,   'E_3471' ,   
                                    'E_2850' ,   'E_2720' ,   'E_4007' ,   'E_4147' ,   'E_4784' ,   'E_4779' ,   'E_1591' ,   'E_3200' ,   'E_0215' ,   'E_0990' ,   'E_4892' ,   'E_2247' ,   
                                    'E_4290' ,   'E_4181' ,   'E_2560' ,   'E_2241' ,   'E_3362' ,   'E_4544' ,   'E_4704' ,   'E_4360' ,   'E_3690' ,   'E_2430' ]
        
        self.check_male_eval =  ['E_1607' ,   'E_0237' ,   'E_0253' ,   'E_0042' ,   'E_2997' ,   'E_0829' ,   'E_3919' ,   'E_5193' ,   'E_0002' ,   'E_1654' ,   'E_1305' ,   'E_4760' ,   
                                'E_1446' ,   'E_3577' ,   'E_5237' ,   'E_0009' ,   'E_0060' ,   'E_0602' ,   'E_0219' ,   'E_2081' ,   'E_0476' ,   'E_3944' ,   'E_2194' ,   'E_1242' ,   
                                'E_0390' ,   'E_0312' ,   'E_2750' ,   'E_3000' ,   'E_4608' ,   'E_2303' ,   'E_1865' ,   'E_1571' ,   'E_1229' ,   'E_4408' ,   'E_1085' ,   'E_1742' ,   
                                'E_0180' ,   'E_4343' ,   'E_1491' ,   'E_4849' ,   'E_0034' ,   'E_0017' ,   'E_0929' ,   'E_0422' ,   'E_1060' ,   'E_4783' ,   'E_0653' ,   'E_1095' ,   
                                'E_1557' ,   'E_2223' ,   'E_0832' ,   'E_2677' ,   'E_5010' ,   'E_4739' ,   'E_3548' ,   'E_3084' ,   'E_2290' ,   'E_1870' ,   'E_0403' ,   'E_3197' ,   
                                'E_4315' ,   'E_4562' ,   'E_1594' ,   'E_2680' ,   'E_2813' ,   'E_2335' ,   'E_2959' ,   'E_2155' ,   'E_3559' ,   'E_4612' ,   'E_1638' ,   'E_1439' ,   
                                'E_1389' ,   'E_5371' ,   'E_2918' ,   'E_2754' ,   'E_0191' ,   'E_0214' ,   'E_1686' ,   'E_5258' ,   'E_5398' ,   'E_0825' ,   'E_1755' ,   'E_3261' ,   
                                'E_4818' ,   'E_3488' ,   'E_0110' ,   'E_2040' ,   'E_0595' ,   'E_0611' ,   'E_3623' ,   'E_2270' ,   'E_1065' ,   'E_0135' ,   'E_2664' ,   'E_4867' ,   
                                'E_2606' ,   'E_3268' ,   'E_3291' ,   'E_0723' ,   'E_2874' ,   'E_5218' ,   'E_2715' ,   'E_5150' ,   'E_4869' ,   'E_4391' ,   'E_0089' ,   'E_3699' ,   
                                'E_3339' ,   'E_2948' ,   'E_0434' ,   'E_0623' ,   'E_1534' ,   'E_1489' ,   'E_1565' ,   'E_1137' ,   'E_0915' ,   'E_3303' ,   'E_0786' ,   'E_0211' ,   
                                'E_4732' ,   'E_4119' ,   'E_0112' ,   'E_4073' ,   'E_1133' ,   'E_2555' ,   'E_0173' ,   'E_1021' ,   'E_1675' ,   'E_3992' ,   'E_2868' ,   'E_1707' ,   
                                'E_3139' ,   'E_4876' ,   'E_2943' ,   'E_4855' ,   'E_3695' ,   'E_4580' ,   'E_3462' ,   'E_3851' ,   'E_2333' ,   'E_2612' ,   'E_1931' ,   'E_1554' ,   
                                'E_1854' ,   'E_3979' ,   'E_1115' ,   'E_4658' ,   'E_3680' ,   'E_0505' ,   'E_3552' ,   'E_3751' ,   'E_3879' ,   'E_5336' ,   'E_0117' ,   'E_3884' ,   
                                'E_0597' ,   'E_4092' ,   'E_3700' ,   'E_2401' ,   'E_2510' ,   'E_4836' ,   'E_2453' ,   'E_1494' ,   'E_2021' ,   'E_4942' ,   'E_4901' ,   'E_3410' ,   
                                'E_3110' ,   'E_3440' ,   'E_5418' ,   'E_1773' ,   'E_1379' ,   'E_5182' ,   'E_4683' ,   'E_3675' ,   'E_1193' ,   'E_0310' ,   'E_2088' ,   'E_4435' ,   
                                'E_2945' ,   'E_2342' ,   'E_0197' ,   'E_1781' ,   'E_1852' ,   'E_2963' ,   'E_4084' ,   'E_4722' ,   'E_1845' ,   'E_2729' ,   'E_4720' ,   'E_3776' ,   
                                'E_1400' ,   'E_0266' ,   'E_0682' ,   'E_2056' ,   'E_1099' ,   'E_4036' ,   'E_2660' ,   'E_1701' ,   'E_1744' ,   'E_0728' ,   'E_5346' ,   'E_2921' ,   
                                'E_1703' ,   'E_2020' ,   'E_1195' ,   'E_0658' ,   'E_0986' ,   'E_4564' ,   'E_1300' ,   'E_5126' ,   'E_1705' ,   'E_5162' ,   'E_4742' ,   'E_4538' ,   
                                'E_1227' ,   'E_1178' ,   'E_1621' ,   'E_4024' ,   'E_5130' ,   'E_3706' ,   'E_4155' ,   'E_4395' ,   'E_1993' ,   'E_5278' ,   'E_1111' ,   'E_5187' ,   
                                'E_1856' ,   'E_2501' ,   'E_5141' ,   'E_3951' ,   'E_5116' ,   'E_4713' ,   'E_3012' ,   'E_4677' ,   'E_5322' ,   'E_0759' ,   'E_2175' ,   'E_1803' ,   
                                'E_1186' ,   'E_1220' ,   'E_2779' ,   'E_2749' ,   'E_1542' ,   'E_5266' ,   'E_4877' ,   'E_3484' ,   'E_5158' ,   'E_1994' ,   'E_0514' ,   'E_4339' ,   
                                'E_5342' ,   'E_5110' ,   'E_2334' ,   'E_5363' ,   'E_5414' ,   'E_1388' ,   'E_4863' ,   'E_2923' ,   'E_5304' ,   'E_2470' ,   'E_4152' ,   'E_1879' ,   
                                'E_1118' ,   'E_4905' ,   'E_4695' ,   'E_4509' ,   'E_1313' ,   'E_4752' ,   'E_3647' ,   'E_2076' ,   'E_3160' ,   'E_2407' ,   'E_4492' ,   'E_3400' ,   
                                'E_2690' ,   'E_4016' ,   'E_0437' ,   'E_1502' ,   'E_5120' ,   'E_1004' ,   'E_0850' ,   'E_0578' ,   'E_4819' ,   'E_3639' ,   'E_2614' ,   'E_5147' ,   
                                'E_4632' ,   'E_2258' ,   'E_0259' ,   'E_1639' ,   'E_0202' ,   'E_0365' ,   'E_2038' ,   'E_4873' ,   'E_3522' ,   'E_4398' ,   'E_1617' ,   'E_2755' ,   
                                'E_0299' ,   'E_1000' ,   'E_2641' ,   'E_4171' ,   'E_2321' ,   'E_3746' ,   'E_0585' ,   'E_0257' ,   'E_4862' ,   'E_4805' ,   'E_2783' ,   'E_2922' ,   
                                'E_2632' ,   'E_2681' ,   'E_5405' ,   'E_1980' ,   'E_3327' ,   'E_0561' ,   'E_0924' ,   'E_5320' ,   'E_0206' ,   'E_0424' ,   'E_1884' ,   'E_5411' ,   
                                'E_3709' ,   'E_1139' ,   'E_2800' ,   'E_3904' ,   'E_0967' ,   'E_0338' ,   'E_2343' ,   'E_1191' ,   'E_2309' ,   'E_0700' ,   'E_3247' ,   'E_0732' ,   
                                'E_1212' ,   'E_3498' ,   'E_0147' ,   'E_3338' ,   'E_2072' ,   'E_3790' ,   'E_3172' ,   'E_4378' ,   'E_3466' ,   'E_3564' ,   'E_5440' ,   'E_4004' ,   
                                'E_1192' ,   'E_0143' ,   'E_4186' ,   'E_2099' ,   'E_5369' ,   'E_1291' ,   'E_1101' ,   'E_0706' ,   'E_5211' ,   'E_1889' ,   'E_3148' ,   'E_4082' ,   
                                'E_1298' ,   'E_4162' ,   'E_3717' ,   'E_2349' ,   'E_2726' ,   'E_4145' ,   'E_4266' ]
      
        protocol = os.path.join(self.path_to_protocol, 'converted_ASVspoof5.'+ self.part + '.metadata.txt')
        if self.access_type == 'LA':
            self.tag = {"-": 0, "A01": 1, "A02": 2, "A03": 3, "A04": 4, "A05": 5, "A06": 6, "A07": 7, "A08": 8, "A09": 9,
                      "A10": 10, "A11": 11, "A12": 12, "A13": 13, "A14": 14, "A15": 15, "A16": 16, "A17": 17, "A18": 18,
                      "A19": 19, "A20": 20, "A21": 21, "A22": 22, "A23": 23, "A24": 24, "A25": 25, "A26": 26, "A27": 27, 
                      "A28": 28, "A29": 29, "A30": 30, "A31": 31, "A32": 32}

        self.label = {"spoof": 0, "bonafide": 1}

        with open(protocol, 'r') as f:
            audio_info = [info.strip().split() for info in f.readlines()]
            if genuine_only:
                assert self.part in ["train", "dev", "eval"]
                if self.access_type == "LA":
                    #num_bonafide = {"train": 2580, "dev": 2548}
                    self.all_info =  [entry for entry in audio_info if entry[4] != 'spoof']
            else:
                self.all_info = audio_info

    def __len__(self):
        return len(self.all_info)

    def __getitem__(self, idx):
        #speaker, filename, _, tag, label = self.all_info[idx]
        speaker, filename, _, tag, label,_ = self.all_info[idx]
        try:
            with open(self.ptf + '/'+ filename + self.feature + '.pkl', 'rb') as feature_handle:
                feat_mat = pickle.load(feature_handle)
        except:
            # add this exception statement since we may change the data split
            def the_other(train_or_dev):
                assert train_or_dev in ["train", "dev"]
                res = "dev" if train_or_dev == "train" else "train"
                return res
            with open(os.path.join(self.path_to_features, the_other(self.part)) + '/'+ filename + self.feature + '.pkl', 'rb') as feature_handle:
                feat_mat = pickle.load(feature_handle)

        feat_mat = torch.from_numpy(feat_mat)
        this_feat_len = feat_mat.shape[1]
        if this_feat_len > self.feat_len:
            startp = np.random.randint(this_feat_len-self.feat_len)
            feat_mat = feat_mat[:, startp:startp+self.feat_len]
        if this_feat_len < self.feat_len:
            if self.padding == 'zero':
                feat_mat = padding(feat_mat, self.feat_len)
            elif self.padding == 'repeat':
                feat_mat = repeat_padding(feat_mat, self.feat_len)
            else:
                raise ValueError('Padding should be zero or repeat!')
            
          
        if self.include_gender == True:
            if speaker in self.check_female_dev or speaker in self.check_female_eval or speaker in self.check_female_train:
                gender = "female"
            elif speaker in self.check_male_dev or speaker in self.check_male_eval or speaker in self.check_male_train:
                gender = "male"
            else:
                raise ValueError("Problem to find gender")
            
        if self.genuine_only == True:
            if label != 'bonafide':
                raise ValueError("bonafide label should only be included")
            
            return feat_mat, filename, self.tag[tag], self.label[label], gender , speaker

        return feat_mat, filename, self.tag[tag], self.label[label] , _ , speaker

    def collate_fn(self, samples):
        return default_collate(samples)

def padding(spec, ref_len):
    width, cur_len = spec.shape
    assert ref_len > cur_len
    padd_len = ref_len - cur_len
    return torch.cat((spec, torch.zeros(width, padd_len, dtype=spec.dtype)), 1)

def repeat_padding(spec, ref_len):
    mul = int(np.ceil(ref_len / spec.shape[1]))
    spec = spec.repeat(1, mul)[:, :ref_len]
    return spec

if __name__ == "__main__":
    # path_to_database = '/data/neil/DS_10283_3336/'  # if run on GPU
   # path_to_features = '/dataNVME/neil/ASVspoof2019Features/'  # if run on GPU
    path_to_features = 'F:/ASVSpoof5/Features_pkl/'
    path_to_protocol = 'E:/ASVSpoof5/cm_protocols/converted_ASVSpoof5'

